version: '3.8'

networks:
  frontapify:
    driver: bridge

services:
  # postgres db
  postgres_db:
    image: postgres:latest # use latest official postgres version
    container_name: postgres
    environment:
      POSTGRES_DB: frontapify # database name
      POSTGRES_USER: postgres # database admin user
      POSTGRES_PASSWORD: aldhr1011 # database admin aldhr1011
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgres
      - ./postgres:/docker-entrypoint-initdb.d
  
  # Keycloak with postgres
  keycloak:
      image: quay.io/keycloak/keycloak:latest
      container_name: keycloak
      command: ['start-dev "--import-realm"']
      environment:
        - KC_DB=postgres
        - KC_DB_URL_HOST=postgres_db
        - KC_DB_USERNAME=postgres
        - KC_DB_PASSWORD=aldhr1011
        - KEYCLOAK_ADMIN=keycloak
        - KEYCLOAK_ADMIN_PASSWORD=aldhr1011
        - KC_HTTP_PORT=9080
        - KC_HTTPS_PORT=9443
      volumes:
        - ./keycloak-config:/opt/keycloak/data/import
      ports:
        - 9080:9080
        - 9443:9443
      depends_on:
        - postgres_db

  # Redis cache
  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - redis:/data

  # APISIX API Gateway
  apisix-dashboard:
    image: apache/apisix-dashboard:latest
    container_name: apisix-dashboard
    restart: always
    volumes:
      - ./apisix/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - "9000:9000"
    networks:
      - frontapify

  apisix:
    image: apache/apisix:latest
    container_name: apisix
    restart: always
    volumes:
      - ./apisix/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - "80:8080/tcp"
      - "443:8443/tcp"
    networks:
      - frontapify

  etcd:
    image: bitnami/etcd:latest
    restart: always
    container_name: etcd
    volumes:
      - etcd_data:/bitnami/etcd
      - ./apisix/etcd_conf:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - frontapify

  # Monitoring LGTM Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./apisix/prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - frontapify

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - "./apisix/grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./apisix/grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./apisix/grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - frontapify

  minio:
    image: minio/minio
    entrypoint: [""]
    container_name: minio
    command: ["sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data"]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - minio-data:/data
    networks:
      - frontapify

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    networks:
      - frontapify

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo.yaml:/etc/tempo.yaml
      - ./monitoring/tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin
    networks:
      - frontapify

  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    depends_on:
      - minio
    command: [ "-config.file=/etc/mimir.yaml" ]
    volumes:
      - ./monitoring/mimir.yaml:/etc/mimir.yaml
      - ./monitoring/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-data:/data
    networks:
      - frontapify

volumes:
  postgres_data: # named volumes can be managed easier using docker-compose
  mimir-data:
  minio-data:
  redis:
    driver: local
  etcd_data:
    driver: local